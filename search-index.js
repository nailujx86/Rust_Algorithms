var searchIndex={};
searchIndex["rust_algorithms"] = {"doc":"","i":[[0,"graph","rust_algorithms","",null,null],[3,"Node","rust_algorithms::graph","A node which can be part of a graph. Use a graph to work…",null,null],[12,"id","","",0,null],[12,"name","","",0,null],[12,"is_discovered","","",0,null],[3,"Link","","This structure represents a link between two nodes. It…",null,null],[12,"members","","",1,null],[12,"cost","","",1,null],[3,"Graph","","A graph, consisting of nodes and links between them.",null,null],[3,"SearchResult","","A result of a search algorithm for a path between two…",null,null],[12,"links","","",2,null],[12,"cost","","",2,null],[11,"new","","Create a new node object, with some sensible default values.",0,[[["str"]],["self"]]],[11,"new","","Creates a link between two nodes. # Example ``` use…",1,[[["usize"]],["self"]]],[11,"new","","Creates a new graph, with empty node- and link-list.",3,[[],["self"]]],[11,"find_link","","Checks for existence of and finds a link between two…",3,[[["isize"],["self"]],[["option",["link"]],["link"]]]],[11,"find_links_from_node","","Finds all links in which the given node is part of. It…",3,[[["isize"],["self"]],[["link"],["vec",["link"]]]]],[11,"add_link","","Adds a link to the graph, if it is not a part of the graph…",3,[[["link"],["self"]]]],[11,"add_node","","Adds a node to the graph, if it is not a part of the graph…",3,[[["node"],["self"]],["isize"]]],[11,"get_node","","Retrieves a node from the graph by its id. Returns None,…",3,[[["isize"],["self"]],[["option",["node"]],["node"]]]],[11,"new","","Creates a new search result to return from a function.",2,[[],["self"]]],[11,"links","","Part of the builder pattern for a Link.",2,[[["link"],["vec",["link"]]],["self"]]],[11,"cost","","Part of the builder pattern for a Link.",2,[[["usize"]],["self"]]],[0,"bfs","rust_algorithms","",null,null],[5,"bfs_search_node","rust_algorithms::bfs","A function to search for the path to a node using the…",null,[[["graph"],["isize"]],[["option",["searchresult"]],["searchresult"]]]],[0,"dfs","rust_algorithms","",null,null],[5,"dfs_search_node","rust_algorithms::dfs","A function to search for the path to a node using the…",null,[[["graph"],["isize"]],[["option",["searchresult"]],["searchresult"]]]],[0,"spanningtree","rust_algorithms","",null,null],[3,"Node","rust_algorithms::spanningtree","",null,null],[12,"id","","",4,null],[12,"name","","",4,null],[12,"msg_count","","",4,null],[12,"next_hop","","",4,null],[12,"root_cost","","",4,null],[12,"root_id","","",4,null],[3,"Link","","",null,null],[12,"members","","",5,null],[12,"cost","","",5,null],[3,"Tree","","",null,null],[11,"new","","The Node is to be used within a Tree. In a Spanningtree it…",4,[[["isize"],["str"]],["self"]]],[11,"receive_suggestion","","Receives a suggestion for a path to a node. If the path…",4,[[["isize"],["self"],["usize"]],["bool"]]],[11,"new","","",5,[[["usize"]],["self"]]],[11,"new","","",6,[[],["self"]]],[11,"find_link","","Returns a link, if there is one, between node a and node…",6,[[["isize"],["self"]],[["option",["link"]],["link"]]]],[11,"find_links","","Returns all links that have a connection to a node…",6,[[["isize"],["self"]],[["link"],["vec",["link"]]]]],[11,"add_link","","Adds a link to the tree, if it doesnt exist yet.",6,[[["self"],["link"]]]],[11,"add_node","","Adds a node to the tree if this doesnt exist already. Also…",6,[[["self"],["node"]]]],[11,"get_node","","Gets a specific node from the tree, specified by their id,…",6,[[["isize"],["self"]],[["node"],["option",["node"]]]]],[11,"run_calc","","Runs a simulation run on the tree for the specified node.",6,[[["isize"],["self"],["bool"]],["bool"]]],[11,"simulate","","Simulates a tree until for x iterations or even longer if…",6,[[["self"],["usize"],["bool"]]]],[11,"from","rust_algorithms::graph","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","rust_algorithms::spanningtree","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"clone","rust_algorithms::graph","",0,[[["self"]],["node"]]],[11,"clone","","",1,[[["self"]],["link"]]],[11,"clone","","",3,[[["self"]],["graph"]]],[11,"default","","",3,[[],["graph"]]],[11,"default","","",2,[[],["searchresult"]]],[11,"default","rust_algorithms::spanningtree","",6,[[],["tree"]]],[11,"eq","rust_algorithms::graph","",0,[[["self"],["node"]],["bool"]]],[11,"ne","","",0,[[["self"],["node"]],["bool"]]],[11,"eq","","",1,[[["link"],["self"]],["bool"]]],[11,"ne","","",1,[[["link"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Node"],[3,"Link"],[3,"SearchResult"],[3,"Graph"],[3,"Node"],[3,"Link"],[3,"Tree"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);